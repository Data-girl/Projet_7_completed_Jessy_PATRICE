import json
import pandas as pd
import plotly.express as px
import requests
import streamlit as st
from PIL import Image

## PAGE CONFIGURATION
st.set_page_config(
    layout="wide",
    initial_sidebar_state="expanded",
    page_title="Attribution de pr√™t",
    page_icon="üü¢",
)


# Titre de l'application
st.markdown(
    "<h1 style='text-align: center; color: black;'> Attribution de pr√™t </h1>",
    unsafe_allow_html=True,
)


# cr√©er la sidebar avec image
st.sidebar.header("Pr√©diction de pr√™t automatique")
image = Image.open("./static/img.png")
st.sidebar.image(image, use_column_width=True)
st.sidebar.info(
    "Cette application web est cr√©ee pour pr√©dire le fait qu'un client soit √† risque ou s√ªr pour l'attribution d'un pr√™t"
)
st.sidebar.success("Con√ßue par Jessy PATRICE ‚ù§Ô∏è")

st.markdown(
    """
            <p style="color:Gray;font-family:'Roboto Condensed';">
            
            Ce Dashboard est destin√© aux charg√©s de relation client afin de les aider dans leur prise de d√©cision d'un accord de pr√™t. 
            L'objectif √©tait de d√©velopper un mod√®le de scoring de la probabilit√© de d√©faut de paiement d'un client pour √©tayer la d√©cision d'accorder ou non un pr√™t √† un client potentiel en s'appuyant sur des sources de donn√©es vari√©es (donn√©es comportementales, familiales, donn√©es provenant d'autres institutions financi√®res, ...).
            
            Il r√©pond au besoin de transparence des vis-√†-vis des d√©cisions d'attribution de cr√©dit. </p>
            """,
    unsafe_allow_html=True,
)

# First section (row)
st.markdown("#### 1 - Que voulez vous afficher ?")


# Make page
option = st.selectbox(
    "Choisir une action:",
    (
        "---",
        "D√©cision d'attribution d'un pr√™t",
        "les graphiques de l'importance globale",
    ),
)


# Saisie
if option == "D√©cision d'attribution d'un pr√™t":

    st.markdown("#### 2 - Saisir un num√©ro client pour la pr√©diction")

    client_id_input = st.text_input("Indiquez le num√©ro du client:", value="")

    inputs = {"numero_client": client_id_input}

    # clients_response = requests.get(url="http://localhost:8000/database")
    clients_response = requests.get(
        url="https://mybackendapp.azurewebsites.net/database"
    )
    all_clients = json.loads(clients_response.text)
    all_clients = pd.DataFrame(all_clients)
    all_clients = all_clients["values"].to_list()

    # bouton pr√©dire
    st.caption("NB: Il s'agit d'un num√©ro √† 6 chiffres")
    st.markdown("#### 3 - Ex√©cuter la pr√©diction")
    if st.button("Pr√©dire"):
        if client_id_input == "" or client_id_input.isalpha():
            st.error("Saisir un num√©ro client")

        elif int(client_id_input) not in all_clients:
            st.error("Veuillez saisir un num√©ro client valide svp", icon="üö®")

        else:
            # CONVOQUER L'ENDPOINT DE LA PREDICTION
            # pred = requests.post(url="http://localhost:8000/predict", params=inputs)
            pred = requests.post(
                url="https://mybackendapp.azurewebsites.net/predict", params=inputs
            )

            # Turn JSON to dict data then grab prediction
            pred_str_format = json.loads(pred.text)
            pred_str_format = pred_str_format["probabilite"]

            # Logiques pour la pr√©diction
            if pred_str_format == "Pr√™t accord√©, client s√ªr":
                st.success(pred_str_format, icon="‚úÖ")
                st.write("Il s'agit de la d√©cision automatique obtenue en fonction du croisement de plusieurs variables d√©taill√©es ci-dessous.")

                # CONVOQUER L'ENDPOINT DE LA FEATURE IMPORTANCE
                # importance = requests.post(url="http://localhost:8000/importance_locale", params=inputs)
                importance = requests.post(
                    url="https://mybackendapp.azurewebsites.net/importance_locale",
                    params=inputs,
                )

                json_data = json.loads(importance.text)
                plot = pd.read_html(json_data["data"])
                plot_importance = plot[0]

                st.write(
                    "<h3 style='text-align: center; color: black;'> Importance locale des variables qui ont contribu√© √† la pr√©diction pour ce client </h3>",
                    unsafe_allow_html=True,
                )
                # Utilisation de plotly
                fig = px.bar(
                    plot_importance, x="Feature", y="Contribution?", title="", color = "Contribution?",
                    color_continuous_scale=["red", "green"]
                )
                st.plotly_chart(fig, use_container_width=True)
                st.markdown(
                    "<h6 style='text-align: center; color: black;'> Figure 1 : Importance des variables sur la pr√©diction </h6>",
                    unsafe_allow_html=True,
                )

                # Affichage du dataframe de l'importance locale
                st.write(" ")
                st.write(" ")
                st.write(" ")
                st.write(
                    "Vous pouvez filtrer et agrandir en plein √©cran le tableau ci-dessous pour conna√Ætre en d√©tail l'importance de chaque variable sur la pr√©diction effectu√©e pour ce client"
                )
                st.dataframe(plot_importance.iloc[:, :2], use_container_width=True)
                st.markdown(
                    "<h6 style='text-align: center; color: black;'> Tableau 1 : Tableau de l'importance locale des variables sur la pr√©diction </h6>",
                    unsafe_allow_html=True,
                )

            elif pred_str_format == "Pr√™t non accord√©, risque de d√©faut":
                st.warning(pred_str_format, icon="‚ö†Ô∏è")
                st.write("Il s'agit de la d√©cision automatique obtenue en fonction du croisement de plusieurs variables d√©taill√©es ci-dessous.")
                

                # CONVOQUER L'ENDPOINT DE LA FEATURE IMPORTANCE
                # importance = requests.post(url="http://localhost:8000/importance_locale", params=inputs)
                importance = requests.post(
                    url="https://mybackendapp.azurewebsites.net/importance_locale",
                    params=inputs,
                )

                json_data = json.loads(importance.text)
                plot = pd.read_html(json_data["data"])
                plot_importance = plot[0]

                st.write(
                    "<h3 style='text-align: center; color: black;'> Importance locale des variables qui ont contribu√© √† la pr√©diction pour ce client</h3>",
                    unsafe_allow_html=True,
                )
                # Utilisation de plotly
                fig = px.bar(plot_importance, x="Feature", y="Contribution?", title="", color = "Contribution?",
                    color_continuous_scale=["red", "green"])
                st.plotly_chart(fig, use_container_width=True)

                st.markdown(
                    "<h6 style='text-align: center; color: black;'> Figure 1 : Affichage graphique de l'importance locale des variables sur la pr√©diction </h6>",
                    unsafe_allow_html=True,
                )

                # Affichage du dataframe de l'importance locale
                st.write(" ")
                st.write(" ")
                st.write(" ")
                st.write(" ")
                st.write(
                    "Vous pouvez filtrer et agrandir en plein √©cran le tableau ci-dessous pour conna√Ætre en d√©tail l'importance de chaque variable sur la pr√©diction effectu√©e pour ce client"
                )
                st.dataframe(plot_importance.iloc[:, :2], use_container_width=True)
                st.markdown(
                    "<h6 style='text-align: center; color: black;'> Tableau 1: Affichage de l'importance locale des variables sur la pr√©diction </h6>",
                    unsafe_allow_html=True,
                )

            else:
                st.error("Veuillez saisir un num√©ro client valide", icon="üö®")


if option == "les graphiques de l'importance globale":
    # globale = requests.get(url='http://localhost:8000/globale_importance')
    globale = requests.get(
        url="https://mybackendapp.azurewebsites.net/globale_importance"
    )

    json_data = json.loads(globale.text)
    plot = pd.read_html(json_data["data"])
    plot_importance = plot[0]

    # Feature importance

    st.write(
        "<h3 style='text-align: center; color: black;'> Importance globale des variables qui ont contribu√© √† la pr√©diction </h3>",
        unsafe_allow_html=True,
    )

    fig = px.bar(plot_importance, x="Feature", y="Weight", color = "Weight",
                    color_continuous_scale=["red", "green"])
    st.plotly_chart(fig, use_container_width=True)

    st.markdown(
        "<h6 style='text-align: center; color: black;'> Figure 2 : Affichage graphique de l'importance globale des variables sur la pr√©diction </h6>",
        unsafe_allow_html=True,
    )
    st.write(" ")
    st.write(" ")
    st.write(" ")
    st.write(
        "Vous pouvez filtrer et agrandir en plein √©cran le tableau ci-dessous pour conna√Ætre en d√©tail l'importance de chaque variable"
    )
    st.dataframe(plot_importance, use_container_width=True)
    
    st.markdown(
        "<h6 style='text-align: center; color: black;'> Tableau 2 : Tableau de l'importance globale des variables sur la pr√©diction </h6>",
        unsafe_allow_html=True,
    )

hide_streamlit_style = """
            <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            footer:after {
                content:'Fait par Jessy PATRICE avec Streamlit'; 
                visibility: visible;
                display: block;
                text-align: center;
                #background-color: red;
                padding: 5px;
                top: 2px;
            }
            </style>
            """
st.markdown(hide_streamlit_style, unsafe_allow_html=True) 

# streamlit run myapp.py
